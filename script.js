// Vari√°vel para controlar se as anima√ß√µes est√£o ativas
let vantaEffect = null;
let isDesktop = window.innerWidth > 768;

// Inicializar fundo animado Vanta.js
function initVantaBackground() {
    try {
        // Verificar se Vanta e THREE est√£o dispon√≠veis
        if (typeof VANTA !== 'undefined' && typeof THREE !== 'undefined') {
            vantaEffect = VANTA.NET({
                el: "#vanta-bg",
                mouseControls: true,
                touchControls: true,
                gyroControls: false,
                minHeight: 200.00,
                minWidth: 200.00,
                scale: 1.00,
                scaleMobile: 1.00,
                color: 0x8a2be2,      // Roxo
                backgroundColor: 0x0a0a1a, // Preto azulado
                points: isDesktop ? 8.00 : 4.00,  // Menos pontos no mobile
                maxDistance: isDesktop ? 25.00 : 15.00,
                spacing: isDesktop ? 18.00 : 25.00,
                showDots: true
            });
            console.log('‚úÖ Vanta.js carregado com sucesso');
        } else {
            console.warn('‚ö†Ô∏è Vanta.js ou THREE.js n√£o encontrados, usando fallback');
        }
    } catch (error) {
        console.warn('‚ö†Ô∏è Erro ao carregar Vanta.js:', error);
    }
}

// Anima√ß√µes de entrada com GSAP TOTALMENTE SINCRONIZADAS
function initEntranceAnimations() {
    try {
        if (typeof gsap !== 'undefined') {
            // Timeline principal SINCRONIZADA - TODOS OS ELEMENTOS JUNTOS
            const tl = gsap.timeline();
            
            // SINCRONIZA√á√ÉO TOTAL: Todos os elementos animam simultaneamente
            // Animar fundo
            tl.to('.fundo', {
                opacity: 0.3,
                duration: 0.6,
                ease: "power2.out"
            })
            
            // TODOS OS ELEMENTOS ANIMAM JUNTOS com delays m√≠nimos
            .fromTo(['.mesa', '.caixas', '.notebook', '.teclado', '.robo'], {
                y: 100,
                opacity: 0,
                scale: 0.8
            }, {
                y: 0,
                opacity: 1,
                scale: 1,
                duration: 0.6,
                ease: "back.out(1.7)",
                stagger: 0.05  // Delay m√≠nimo de 0.05s entre elementos
            }, "-=0.4");
            
            console.log('‚úÖ GSAP anima√ß√µes SINCRONIZADAS carregadas');
        } else {
            // Fallback: usar anima√ß√µes CSS sincronizadas
            document.body.classList.add('fallback-animation');
            console.warn('‚ö†Ô∏è GSAP n√£o encontrado, usando anima√ß√µes CSS SINCRONIZADAS de fallback');
        }
    } catch (error) {
        console.warn('‚ö†Ô∏è Erro no GSAP:', error);
        document.body.classList.add('fallback-animation');
    }
}

// Efeito parallax melhorado para desktop - MAIS RESPONSIVO
function initParallaxEffect() {
    if (!isDesktop) return; // S√≥ ativar no desktop
    
    document.addEventListener('mousemove', (e) => {
        const x = (e.clientX / window.innerWidth - 0.5) * 2; // -1 a 1
        const y = (e.clientY / window.innerHeight - 0.5) * 2; // -1 a 1
        
        // Movimento sutil do rob√¥ com perspectiva - MAIS R√ÅPIDO
        const robo = document.querySelector('.robo');
        if (robo) {
            gsap.to(robo, {
                duration: 0.3, // Reduzido de 0.6
                rotationY: x * 3,
                rotationX: -y * 2,
                x: x * 15,
                y: y * 10,
                ease: "power2.out"
            });
        }
        
        // Movimento do fundo Vanta (se existir)
        if (vantaEffect) {
            vantaEffect.setOptions({
                mouseControls: true,
                gyroControls: false
            });
        }
        
        // Movimento sutil dos outros elementos - MAIS R√ÅPIDO
        gsap.to('.notebook', {
            duration: 0.4, // Reduzido de 0.8
            x: x * 8,
            y: -y * 5,
            rotationY: x * 2,
            ease: "power2.out"
        });
        
        gsap.to('.caixas', {
            duration: 0.45, // Reduzido de 0.9
            x: x * 5,
            y: -y * 3,
            ease: "power2.out"
        });
        
        gsap.to('.teclado', {
            duration: 0.35, // Reduzido de 0.7
            x: x * 6,
            y: -y * 4,
            ease: "power2.out"
        });
    });
}

// Efeitos de hover melhorados - MAIS R√ÅPIDOS
function initHoverEffects() {
    const elements = [
        { selector: '.robo', scale: 1.03, glow: 40 },
        { selector: '.notebook', scale: 1.06, glow: 30 },
        { selector: '.teclado', scale: 1.05, glow: 25 },
        { selector: '.caixas', scale: 1.04, glow: 35 },
        { selector: '.mesa', scale: 1.01, glow: 25 }
    ];
    
    elements.forEach(({ selector, scale, glow }) => {
        const element = document.querySelector(selector);
        if (!element) return;
        
        element.addEventListener('mouseenter', () => {
            if (typeof gsap !== 'undefined') {
                gsap.to(element, {
                    scale: scale,
                    y: selector !== '.mesa' ? -8 : 0,
                    duration: 0.2, // Reduzido de 0.4
                    ease: "back.out(1.7)"
                });
            }
        });
        
        element.addEventListener('mouseleave', () => {
            if (typeof gsap !== 'undefined') {
                gsap.to(element, {
                    scale: 1,
                    y: 0,
                    duration: 0.2, // Reduzido de 0.4
                    ease: "back.out(1.7)"
                });
            }
        });
    });
}

// Otimiza√ß√£o para dispositivos m√≥veis
function optimizeForMobile() {
    if (!isDesktop) {
        // Desabilitar efeitos pesados no mobile
        const style = document.createElement('style');
        style.textContent = `
            .robo, .notebook, .teclado, .caixas, .mesa {
                animation: none !important;
                filter: none !important;
            }
            .particles-overlay {
                display: none !important;
            }
        `;
        document.head.appendChild(style);
        console.log('üì± Otimiza√ß√µes mobile aplicadas');
    }
}

// Limpeza ao redimensionar a janela
function handleResize() {
    const newIsDesktop = window.innerWidth > 768;
    
    if (newIsDesktop !== isDesktop) {
        isDesktop = newIsDesktop;
        
        // Recarregar Vanta com novas configura√ß√µes
        if (vantaEffect) {
            vantaEffect.destroy();
            setTimeout(initVantaBackground, 50); // Reduzido de 100
        }
        
        // Reapllicar otimiza√ß√µes
        optimizeForMobile();
    }
}

// Inicializa√ß√£o principal
function init() {
    console.log('üöÄ Inicializando cen√°rio futurista...');
    
    // Detectar dispositivo e otimizar
    optimizeForMobile();
    
    // Inicializar fundo animado
    initVantaBackground();
    
    // Inicializar anima√ß√µes de entrada SINCRONIZADAS
    initEntranceAnimations();
    
    // Inicializar efeito parallax (s√≥ desktop)
    initParallaxEffect();
    
    // Inicializar efeitos de hover
    initHoverEffects();
    
    // Listener para redimensionamento
    window.addEventListener('resize', handleResize);
    
    console.log('‚úÖ Cen√°rio futurista carregado SINCRONIZADO!');
}

// === FUN√á√ïES ORIGINAIS MANTIDAS ===

// Criar part√≠culas digitais (fun√ß√£o original mantida)
function createParticles() {
    const particlesContainer = document.getElementById('particles');
    if (!particlesContainer) return;
    
    const numberOfParticles = isDesktop ? 50 : 20;
    
    for (let i = 0; i < numberOfParticles; i++) {
        const particle = document.createElement('div');
        particle.className = 'particle';
        particle.style.left = Math.random() * 100 + '%';
        particle.style.animationDelay = Math.random() * 10 + 's';
        particle.style.animationDuration = (10 + Math.random() * 10) + 's';
        particlesContainer.appendChild(particle);
    }
}

// Fun√ß√£o original do chat (mantida)
function enviarMensagem() {
    const input = document.getElementById('input');
    const mensagens = document.getElementById('mensagens');

    if (!input || !mensagens) return;

    const msg = input.value.trim();
    if (msg === "") return;

    mensagens.innerHTML += `<div><strong>Voc√™:</strong> ${msg}</div>`;
    input.value = "";

    // Simula√ß√£o de resposta
    setTimeout(() => {
        mensagens.innerHTML += `<div><strong>Prod.AI:</strong> Resposta autom√°tica para: "${msg}"</div>`;
        mensagens.scrollTop = mensagens.scrollHeight;
    }, 500);
}

// Fun√ß√£o de logout (mantida)
function logout() {
    localStorage.clear();
    window.location.href = "login.html";
}

// Limpeza ao sair da p√°gina
window.addEventListener('beforeunload', () => {
    if (vantaEffect) {
        vantaEffect.destroy();
    }
});

// ============ CHATBOT POSICIONADO NO MONITOR ============

class ProdAIChatbot {
    constructor() {
        this.isActive = false;
        this.messageCount = 0;
        this.responses = [
            "Excelente pergunta! Como especialista em produtividade, vou te ajudar a otimizar essa √°rea. Baseado em dados de performance, recomendo focar em t√©cnicas de time-blocking e automa√ß√£o de tarefas repetitivas.",
            "Analisando sua quest√£o, identifico uma oportunidade de melhoria significativa. Vou te guiar atrav√©s de estrat√©gias comprovadas para maximizar seus resultados e efici√™ncia.",
            "Interessante! Como sua mentora virtual, posso te ensinar m√©todos avan√ßados de gest√£o de tempo. Que tal implementarmos a t√©cnica Pomodoro combinada com an√°lise de m√©tricas de produtividade?",
            "Processando seus dados... Detectei padr√µes que podem ser otimizados. Vou te mostrar como aplicar princ√≠pios de alta performance para alcan√ßar seus objetivos de forma mais eficiente.",
            "Baseado em minha an√°lise, essa √© uma √°rea onde podemos implementar melhorias substanciais. Te ensino t√©cnicas de foco profundo e elimina√ß√£o de distra√ß√µes que aumentam a produtividade em at√© 40%.",
            "Excelente! Vamos trabalhar juntos para transformar sua abordagem. Posso te mostrar frameworks de produtividade usados por profissionais de elite que v√£o revolucionar seu workflow.",
            "Como IA especializada em performance, identifico uma oportunidade √∫nica aqui. Vou te ensinar estrat√©gias de otimiza√ß√£o que combinam neuroci√™ncia e gest√£o de tempo para resultados extraordin√°rios.",
            "Fascinante quest√£o! Vou te guiar atrav√©s de metodologias avan√ßadas de produtividade. Juntos, vamos criar um sistema personalizado que se adapta ao seu estilo de trabalho e maximiza seus resultados."
        ];
        
        this.init();
    }
    
    init() {
        this.setupElements();
        this.setupEventListeners();
        this.waitForPageLoad();
    }
    
    setupElements() {
        // Container principal
        this.container = document.getElementById('chatbotContainer');
        
        // Estado Welcome
        this.welcomeState = document.getElementById('chatbotWelcomeState');
        this.mainRobot = document.getElementById('chatbotMainRobot');
        this.mainTitle = document.getElementById('chatbotMainTitle');
        this.mainSubtitle = document.getElementById('chatbotMainSubtitle');
        this.branding = document.getElementById('chatbotBranding');
        this.inputSection = document.getElementById('chatbotInputSection');
        this.mainInput = document.getElementById('chatbotMainInput');
        this.sendButton = document.getElementById('chatbotSendButton');
        
        // Estado Ativo
        this.activeState = document.getElementById('chatbotActiveState');
        this.headerBar = document.getElementById('chatbotHeaderBar');
        this.conversationArea = document.getElementById('chatbotConversationArea');
        this.typingIndicator = document.getElementById('chatbotTypingIndicator');
        this.activeInput = document.getElementById('chatbotActiveInput');
        this.activeSendBtn = document.getElementById('chatbotActiveSendBtn');
    }
    
    setupEventListeners() {
        // Eventos do estado Welcome
        this.sendButton.addEventListener('click', () => this.handleFirstMessage());
        this.mainInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') this.handleFirstMessage();
        });
        
        this.mainInput.addEventListener('focus', () => {
            this.animateInputFocus();
        });
        
        // Eventos do estado Ativo
        this.activeSendBtn.addEventListener('click', () => this.sendMessage());
        this.activeInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') this.sendMessage();
        });
    }
    
    waitForPageLoad() {
        // Aguardar carregamento SINCRONIZADO - MUITO MAIS R√ÅPIDO
        const checkPageReady = () => {
            // Verificar se todos os recursos est√£o carregados
            const images = document.querySelectorAll('img');
            let allImagesLoaded = true;
            
            images.forEach(img => {
                if (!img.complete || img.naturalHeight === 0) {
                    allImagesLoaded = false;
                }
            });
            
            // Verificar se as bibliotecas essenciais carregaram
            const librariesLoaded = typeof gsap !== 'undefined' && typeof VANTA !== 'undefined';
            
            if (allImagesLoaded && librariesLoaded) {
                // SINCRONIZADO: Aguardar m√≠nimo para anima√ß√µes do cen√°rio
                setTimeout(() => {
                    this.animateInitialAppearance();
                }, 800); // Reduzido de 1200
            } else {
                // Verifica√ß√£o mais r√°pida
                setTimeout(checkPageReady, 50); // Reduzido de 100
            }
        };
        
        // Iniciar verifica√ß√£o ap√≥s DOM carregar
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', checkPageReady);
        } else {
            checkPageReady();
        }
    }
    
    animateInitialAppearance() {
        if (typeof gsap !== 'undefined') {
            // Anima√ß√£o de entrada do chatbot SINCRONIZADA com o restante
            gsap.fromTo(this.container, 
                { 
                    scale: 0.7, 
                    opacity: 0,
                    rotationY: 20,
                    y: 50
                },
                { 
                    scale: 1, 
                    opacity: 1,
                    rotationY: 0,
                    y: 0,
                    duration: 0.6,
                    ease: "back.out(1.7)"
                }
            );
            
            // SINCRONIZA√á√ÉO: Elementos internos aparecem QUASE JUNTOS
            const tl = gsap.timeline({ delay: 0.15 }); // Delay m√≠nimo
            
            // TODOS OS ELEMENTOS DO CHATBOT JUNTOS
            tl.fromTo([this.mainRobot, this.mainTitle, this.mainSubtitle, this.inputSection], 
                { scale: 0.5, opacity: 0, y: 30 },
                { 
                    scale: 1, 
                    opacity: 1, 
                    y: 0, 
                    duration: 0.5, 
                    ease: "back.out(1.7)",
                    stagger: 0.05  // Delay m√≠nimo entre elementos
                }
            );
        } else {
            // Fallback sem GSAP - aparecer diretamente
            this.container.style.opacity = '1';
        }
    }
    
    animateInputFocus() {
        if (typeof gsap !== 'undefined') {
            gsap.to(this.inputSection, {
                scale: 1.02,
                duration: 0.15,
                ease: "power2.out"
            });
        }
    }
    
    handleFirstMessage() {
        const message = this.mainInput.value.trim();
        if (!message) {
            this.shakeInput();
            return;
        }
        
        this.activateChat(message);
    }
    
    shakeInput() {
        if (typeof gsap !== 'undefined') {
            gsap.to(this.inputSection, {
                x: -10,
                duration: 0.05,
                repeat: 5,
                yoyo: true,
                ease: "power2.inOut",
                onComplete: () => {
                    gsap.set(this.inputSection, { x: 0 });
                }
            });
        }
    }
    
    activateChat(firstMessage) {
        if (this.isActive) return;
        this.isActive = true;
        
        if (typeof gsap !== 'undefined') {
            const tl = gsap.timeline();
            
            // SINCRONIZADO: Transi√ß√£o mais r√°pida e fluida
            tl.to([this.mainRobot, this.branding], {
                opacity: 0,
                y: -60,
                scale: 0.8,
                duration: 0.3, // Mais r√°pido
                ease: "power2.inOut"
            })
            
            // Expandir container SINCRONIZADO
            .to(this.container, {
                width: 850,
                height: 750,
                duration: 0.4, // Mais r√°pido
                ease: "back.out(1.7)"
            }, "-=0.15") // Overlap maior
            
            // Mostrar estado ativo
            .set(this.welcomeState, { display: 'none' })
            .set(this.activeState, { display: 'flex' })
            
            // TODOS OS ELEMENTOS ATIVOS APARECEM JUNTOS
            .fromTo([this.activeState, this.headerBar, this.conversationArea, '.chatbot-input-area'], 
                { opacity: 0, y: 20 },
                { 
                    opacity: 1, 
                    y: 0, 
                    duration: 0.4, 
                    ease: "power2.out",
                    stagger: 0.05  // Delay m√≠nimo
                }
            );
            
        } else {
            // Fallback sem GSAP
            this.welcomeState.style.display = 'none';
            this.activeState.style.display = 'flex';
            this.activeState.classList.add('active');
            this.container.classList.add('expanded');
        }
        
        // SINCRONIZADO: Primeira mensagem mais r√°pida
        setTimeout(() => {
            this.addMessage(firstMessage, 'user');
            this.activeInput.focus();
            
            // Resposta da IA sincronizada
            setTimeout(() => {
                this.showTyping();
                setTimeout(() => {
                    this.hideTyping();
                    const response = this.getRandomResponse();
                    this.addMessage(response, 'assistant');
                }, 800); // Mais r√°pido
            }, 200); // Muito mais r√°pido
        }, 800); // Reduzido drasticamente
    }
    
    sendMessage() {
        const message = this.activeInput.value.trim();
        if (!message) return;
        
        // Adicionar mensagem do usu√°rio
        this.addMessage(message, 'user');
        this.activeInput.value = '';
        
        // SINCRONIZADO: Resposta da IA mais r√°pida
        setTimeout(() => {
            this.showTyping();
            setTimeout(() => {
                this.hideTyping();
                const response = this.getRandomResponse();
                this.addMessage(response, 'assistant');
            }, 600 + Math.random() * 400); // Mais r√°pido
        }, 100); // Muito mais r√°pido
    }
    
    addMessage(text, sender) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `chatbot-message chatbot-message-${sender}`;
        
        const avatar = document.createElement('div');
        avatar.className = 'chatbot-message-avatar';
        avatar.innerHTML = sender === 'assistant' ? '<i class="fas fa-robot"></i>' : '<i class="fas fa-user"></i>';
        
        const content = document.createElement('div');
        content.className = 'chatbot-message-content';
        
        const bubble = document.createElement('div');
        bubble.className = 'chatbot-message-bubble';
        bubble.textContent = text;
        
        const timestamp = document.createElement('div');
        timestamp.className = 'chatbot-message-timestamp';
        timestamp.textContent = this.getCurrentTime();
        
        content.appendChild(bubble);
        content.appendChild(timestamp);
        messageDiv.appendChild(avatar);
        messageDiv.appendChild(content);
        
        this.conversationArea.appendChild(messageDiv);
        this.scrollToBottom();
        
        // SINCRONIZADO: Anima√ß√£o de mensagem mais r√°pida
        if (typeof gsap !== 'undefined') {
            gsap.fromTo(messageDiv, 
                { opacity: 0, y: 30, scale: 0.95 },
                { opacity: 1, y: 0, scale: 1, duration: 0.2, ease: "back.out(1.7)" }
            );
        }
        
        this.messageCount++;
    }
    
    showTyping() {
        this.typingIndicator.classList.add('active');
        this.scrollToBottom();
    }
    
    hideTyping() {
        this.typingIndicator.classList.remove('active');
    }
    
    scrollToBottom() {
        setTimeout(() => {
            this.conversationArea.scrollTop = this.conversationArea.scrollHeight;
        }, 25); // Mais r√°pido
    }
    
    getCurrentTime() {
        const now = new Date();
        return now.toLocaleTimeString('pt-BR', { 
            hour: '2-digit', 
            minute: '2-digit' 
        });
    }
    
    getRandomResponse() {
        return this.responses[Math.floor(Math.random() * this.responses.length)];
    }
    
    // M√©todo para resetar o chatbot (√∫til para testes)
    reset() {
        this.isActive = false;
        this.messageCount = 0;
        this.mainInput.value = '';
        this.activeInput.value = '';
        
        // Resetar estados visuais
        this.welcomeState.style.display = 'flex';
        this.activeState.style.display = 'none';
        this.activeState.classList.remove('active');
        this.container.classList.remove('expanded');
        
        // Limpar mensagens
        const messages = this.conversationArea.querySelectorAll('.chatbot-message:not(.chatbot-message:first-child)');
        messages.forEach(msg => msg.remove());
        
        this.hideTyping();
    }
}

// SINCRONIZADO: Inicializa√ß√£o muito mais r√°pida
window.addEventListener('load', () => {
    // Inicializar cen√°rio SINCRONIZADO
    setTimeout(init, 25); // Muito mais r√°pido
    
    // Inicializar chatbot SINCRONIZADO
    setTimeout(() => {
        window.prodAIChatbot = new ProdAIChatbot();
        console.log('ü§ñ PROD.AI Chatbot SINCRONIZADO inicializado!');
    }, 50); // Muito mais r√°pido
});

// ============ FUN√á√ÉO PARA RESET (DESENVOLVIMENTO) ============
function resetChatbot() {
    if (window.prodAIChatbot) {
        window.prodAIChatbot.reset();
        console.log('üîÑ Chatbot resetado');
    }
}
// ============ FUNCIONALIDADE DOS BOT√ïES DE A√á√ÉO ============
document.addEventListener('DOMContentLoaded', function() {
    const actionButtons = document.querySelectorAll('.chatbot-action-btn');
    
    actionButtons.forEach(button => {
        button.addEventListener('click', function() {
            const action = this.getAttribute('data-action');
            
            switch(action) {
                case 'upgrade':
                    console.log('Redirecionando para upgrade...');
                    // window.location.href = '/upgrade';
                    break;
                    
                case 'manage':
                    console.log('Abrindo gerenciamento de conta...');
                    // window.location.href = '/account';
                    break;
                    
                case 'logout':
                    console.log('Fazendo logout...');
                    // window.location.href = '/logout';
                    break;
            }
        });
    });
});